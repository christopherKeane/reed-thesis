getCo := function(poly,m)
	bool := exists(i){i:i in [1..#Monomials(poly)] | Monomials(poly)[i] eq m};
	if bool then
		return Coefficients(poly)[i];
	else
		return 0;
	end if;
end function;

P1113<x1,y1,z1,w1> := ProjectiveSpace(Rationals(),[1,1,1,3]);
P1123<x2,y2,z2,w2> := ProjectiveSpace(Rationals(),[1,1,2,3]);

squareZ := map<P1113->P1123 | [x1,y1,z1^2,w1]>;

getEqns := function(poly) /* this poly should be of the form w1^2-Norm */
	schemeProj := squareZ(Scheme(P1113,poly)); /* project to the deg 1 del Pezzo */
	polyProj := Polynomial(schemeProj); /* extract the polynomial defining schemeProj */
	P<a,b,c,d,f,t,u> := PolynomialRing(Rationals(),7); /* give the indeterminate coeffs a home */
	Q := a*x2^2+b*x2*y2+c*y2^2; 
	C := d*x2^3+f*x2^2*y2+t*x2*y2^2+u*y2^3; /* defining general quadratic and cubic. something comment below. */
	compPoly := Evaluate(polyProj,[x2,y2,Q,C]); /* substitute Q,C into the defining eqn */
	eqnList := [getCo(compPoly,Monomials(compPoly)[i]): i in [1..#Monomials(compPoly)]]; /* return eqns for coeffs */
end function;

/*something is going wrong with defining Q. magma is giving the error:

>>         Q := a*x2^2+b*x2*y2+c*y2^2;
                 ^
Runtime error: Arguments are not compatible
Argument types given: RngMPolElt, RngMPolElt

*/