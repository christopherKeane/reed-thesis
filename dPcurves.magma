getCo := function(poly,m)
	bool := exists(i){i:i in [1..#Monomials(poly)] | Monomials(poly)[i] eq m};
	if bool then
		return Coefficients(poly)[i];
	else
		return 0;
	end if;
end function;

R<l>:=PolynomialRing(Rationals());

A<r,s,t,u,a,b,c> := AffineSpace(Rationals(),7); /* Defining a space for the to-be-determined coefficients*/

CR := CoordinateRing(A);

FCR := FieldOfFractions(CR); /* We need to be able to divide by the coefficients */

P1Aux<x1,y1,z1,w1> := ProjectiveSpace(FCR,[1,1,1,3]);
P2Aux<x2,y2,z2,w2> := ProjectiveSpace(FCR,[1,1,2,3]);

/*Define the splitting field for the del Pezzo divisors as well as the tritangents. */

L<zeta12,cr2>:=NumberField([l^4-l^2+1,l^3-2]: Abs := true);

AutLQ,_, LAction:=AutomorphismGroup(L);

/* We need these in order to define the space for the schemes whose points will be the desired 7-tuples */

P1:=ProjectiveSpace(Rationals(),[1,1,1,3]);
P2:=ProjectiveSpace(Rationals(),[1,1,2,3]);

/* Base projective spaces*/

squareZaux := map<P1Aux->P2Aux | [x1,y1,z1^2,w1]>;

/* Squaring map used in projection to the del Pezzo before coeff’s of divisors are determined. */

toRing := function(polyList)
	f2R := hom< FCR -> CR |r,s,t,u,a,b,c>;
	newList := f2R(polyList);
	return(newList);
end function;

/* We only need to divide by the coefficients in solving for them, so we’ll use this to put the resulting tuples back in the ring. */

getEqns := function(poly) /* this poly should be of the form w1^2-sextic */
	schemeProj := squareZaux(Scheme(P1Aux,poly)); /* project to the deg 1 del Pezzo */
	polyProj := DefiningPolynomial(schemeProj); /* extract the polynomial defining schemeProj */	
	Q := a*x2^2+b*x2*y2+c*y2^2; 
	C := r*x2^3+s*x2^2*y2+t*x2*y2^2+u*y2^3; /*these are the equations defining the divisors as in Thm 1.5.9 of Tony’s thesis*/
	compPoly := Evaluate(polyProj,[x2,y2,Q,C]); /* substitute Q,C into the defining eqn */
	eqnList := [getCo(compPoly,Monomials(compPoly)[i]): i in [1..#Monomials(compPoly)]]; /* get eqns for coeffs */
	newList := toRing(eqnList);
	return schemeProj, newList;
end function;

/* This returns the system of equations that will let us determine the tuples. */

getTuples := function(polyList, splf) /*run this using the list from getEqns.*/
	I :=ideal<CR | polyList>; /* This follows the method described in Tony’s thesis for computing the tuples*/
	gb := GroebnerBasis(I);
	f := gb[#gb]; /* This last polynomial in the list will contain only one of the indeterminates from the affine 7-space. */
	unif := Evaluate(f,[0,0,0,0,0,0,l]); /* Magma still sees f as multivariate, but we want Magma to see f as univariate. */
	facto := Factorization(unif);
	appendGb := [GroebnerBasis(Ideal(I,Evaluate(facto[i,1],c))): i in [1..#facto]];
	sys := [Scheme(A,appendGb[i]): i in [1..#appendGb]];
	points := <Points(sys[i], splf): i in [1..#sys]>;
	return appendGb, points; 
end function;

dpDivisors := function(space, scheme, tupleList) /*take space to be P2 over the splitting field from getTuples, list from getTuples, scheme from getEqns*/
	nf := #tupleList;
	ns := space;

	divs := < <Scheme(ns,[ns.3-(tupleList[i,j,5]*ns.1^2+tupleList[i,j,6]*ns.1*ns.2+tupleList[i,j,7]*ns.2^2), ns.4-(tupleList[i,j,1]*ns.1^3+tupleList[i,j,2]*ns.1^2*ns.2+tupleList[i,j,3]*ns.1*ns.2^2+tupleList[i,j,4]*ns.2^3)]): j in [1..#tupleList[i]]> :  i in [1..nf]>;

	return divs;
end function;

/* This Gram matrix function is from Dino Festi. */
function GramMatrixD(List)

m:=#List;
M:=ScalarMatrix(Integers(),m,-2);
/*k:=1;*/

for i in [1..m] do
    for j in [1..i] do
	Int:=List[i] meet List[j];
        if Dimension(Int) eq 1 then
	    M[i,j]:=2*ArithmeticGenus(Int)-2;
		/*print k, M[i,j];
		k:=k+1;*/
	else
	    M[i,j]:=Degree(Int);
		/*print k, M[i,j];
		k:=k+1;*/
	end if;
	M[j,i]:=M[i,j];
    end for;
end for;

return M;

end function;

/* Define the surface of interest. */

fS := x1^6+y1^6+z1^6-w1^2;
Xsch := Scheme(P1, fS);

/* Find the divisors on the del Pezzo. */

Saux, eqnList := getEqns(fS);
grobbases, tups := getTuples(eqnList, L);

P1L := ProjectiveSpace(L,[1,1,1,3]);
P2L := ProjectiveSpace(L,[1,1,2,3]);

dplist := dpDivisors(P2L, Saux, tups);

X1L := BaseChange(Xsch, P1L);
X2L := Scheme(P2L, P2L.1^6+P2L.2^6+P2L.3^3-P2L.4^2);

sqL := map<X1L->P2L | [P2L.1, P2L.2, P2L.3^2, P2L.4]>;

preSkews := [dplist[1,1], dplist[1,4], dplist[3,1], dplist[4,2], dplist[2,2], dplist[5,1], dplist[6,3], dplist[7,1], dplist[2,3]]; /* These are generators for the Picard group of the del Pezzo surface, and were found by inspection. */

/* Make sure that Magma sees these divisors as living in P2L.*/

skews := [Scheme(P2L,[DefiningPolynomials(sch)[1],DefiningPolynomials(sch)[2]]): sch in preSkews];

/* Pull the divisors back and make sure they sit in P1L. */

prePbSkews := [Pullback(sqL,sch) : sch in skews];

pbSkews := [BaseChange(sch, P1L): sch in prePbSkews];


/* These equations were ported from a different computation. */

lines:=
[
Scheme(P1L, [P1L.1+zeta12*P1L.3,P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1-zeta12*P1L.3,P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1+zeta12*P1L.3,-P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1-zeta12*P1L.3,-P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1+zeta12^3*P1L.3,P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1+zeta12^3*P1L.3,-P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1+(zeta12^3-zeta12)*P1L.3,P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1-(zeta12^3-zeta12)*P1L.3,P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1+(zeta12^3-zeta12)*P1L.3,-P1L.2^3+P1L.4]),
Scheme(P1L, [P1L.1-(zeta12^3-zeta12)*P1L.3,-P1L.2^3+P1L.4])
];

preDivs:=pbSkews cat lines;
divs:=Flat(preDivs);

/* Define a way for S3 to act on the equations defining our schemes, and let S3 act on the schemes. */

CRL<xL,yL,zL,wL>:=CoordinateRing(ProjectiveSpace(L,[1,1,1,3]));

var:={xL,yL,zL};
perm:=Permutations(var);
S3:=[hom< CRL -> CRL | [g[1],g[2],g[3],wL] > : g in perm];

preS3divs:=< [Scheme(P1L,[t(DefiningPolynomials(divs[j])[1]), t(DefiningPolynomials(divs[j])[2])]): j in [1..#divs]]: t in S3>;

S3divs:=Flat(preS3divs);

/* In order to compute the intersection matrix, we compute over a finite field. The surface X has good reduction at 23, and has furthermore, the residue field of L at 23 is the field of order 23^2. */

p:=23;
F<alpha>:=GF(p^2);

Pol<v>:=PolynomialRing(F);

/* We need to define reduction mod 23 maps. */

zeta12p:=Roots(v^12-1,F)[12,1];
zeta6p:=zeta12p^2;
cr2p:=Roots(v^3-2,F)[3,1];

PP<X,Y,Z,W>:=ProjectiveSpace(F,[1,1,1,3]);
PPW:=CoordinateRing(PP);

X1Lp:=BaseChange(X1L,PP);

Psi1:=hom< L->F | [zeta12p, cr2p]>;
PsiP:=hom< CRL->PPW | Psi1, [X,Y,Z,W]>;

S3divsP:=[Scheme(PP,[PsiP(DefiningPolynomials(sch)[1]),PsiP(DefiningPolynomials(sch)[2])]): sch in S3divs];

/* This sequence of functions takes in the list of reduced divisors and generates a 20x20 matrix of full rank. */

AGS3divs:=GramMatrixD(S3divsP);
LGS3divs:=Lattice(AGS3divs);
BGS3divs:=Basis(LGS3divs);
rkS3divs:=#BGS3divs; rkS3divs;
SolGS3divs:=Solution(AGS3divs,[Vector(b) : b in BGS3divs]);
MGS3divs:=Matrix(SolGS3divs);
GramGS3divs:=MGS3divs*AGS3divs*Transpose(MGS3divs);

/* Now we work towards defining a Galois action on our divisors. Much of this is based on code from https://homepages.warwick.ac.uk/~maseap/arith/notes/quartic.magma */

AutPolyAction := function(P, a)
  k := BaseRing(Parent(P));
  m := Monomials(P);
  c := Coefficients(P);
  return &+[ k!(c[i] @ a) * m[i] : i in [1..#c] ];
end function;

AutSchemeAction := function(Y, a)
  A := AmbientSpace(Y);
  return Scheme(A, [ AutPolyAction(P, a) 
                     : P in DefiningPolynomials(Y) ] );
end function;

/*Take the divisors’ equations.*/

divEq:=[DefiningPolynomials(sch): sch in divs];

preADivEq:=[];
for eqn in divEq do
	for t in S3 do
             Append(~preADivEq,[t(eqn[1]),t(eqn[2])]);
        end for;
end for;

aDivEq:=Seqset(preADivEq); /* We want to remove repetitions from our list of equations, which this does.*/

/*This generates a list of equations under the action of the Galois group of L.*/

GalDivEq:=[]; 
for eqn in aDivEq do
    for i in [-2..2] do
                Append(~GalDivEq,[AutPolyAction(eqn[1],LAction(AutLQ.i)),AutPolyAction(eqn[2],LAction(AutLQ.i))]);
        end for;
end for;

GalDivEq:=Seqset(GalDivEq); /* Again, we want to get rid of repetitions. */

/* For some reason, applying the Galois action only once does not yield a list of divisors that’s closed under the Galois action. So, we let Galois act again. */

GalDivEq2:=[];
for eqn in GalDivEq do
    for i in [-2..2] do
                Append(~GalDivEq2,[AutPolyAction(eqn[1],LAction(AutLQ.i)),AutPolyAction(eqn[2],LAction(AutLQ.i))]);
        end for;
end for;
GalDivEq2:=Seqset(GalDivEq2);

/* This function looks at how Galois permutes the divisors in our Galois-invariant list. */

GalEqAction := func< a | 
   [ Index(Setseq(GalDivEq2), [AutPolyAction(eqn[1], a),
       AutPolyAction(eqn[2],a)]) : eqn in Setseq(GalDivEq2)] >; 

/* Before proceeding, we check that this list of divisors still generates a rank 20 lattice. */

SchGalDivEq2:=[Scheme(P1L,eqn): eqn in GalDivEq2];

SchGalDivEq2p:=[Scheme(PP,[PsiP(DefiningPolynomials(sch)[1]),PsiP(DefiningPolynomials(sch)[2])]): sch in SchGalDivEq2];

AG:=GramMatrixD(SchGalDivEq2p);
LG:=Lattice(AG);
BG:=Basis(LG);
rk:=#BG; rk;
SolG:=Solution(AG,[Vector(b) : b in BG]);
MG:=Matrix(SolG);
GramG:=MG*AG*Transpose(MG);

/* We use the action of the Galois group generators to realize the Galois group as a permutation group. This is necessary for Magma to compute cohomology groups. */

GGal := PermutationGroup<#GalDivEq2 | [ GalEqAction(LAction(AutLQ.0)), GalEqAction(LAction(AutLQ.1)),GalEqAction(LAction(AutLQ.2)) ] >;
LambdaMod := PermutationModule(GGal, Integers());
rhoL := Representation(LambdaMod);
Lambda := VectorSpace(LambdaMod); 
Pic, class := quo< Lambda | Kernel(AG) >; 
ClassMatrix := Matrix( [ class(Lambda.i) : i in [1..279] ] );
ClassSection := Solution(ClassMatrix, IdentityMatrix(Integers(), 20));
PicMod := GModule(GGal, [ ClassSection * M * ClassMatrix : M in ActionGenerators(LambdaMod) ] );
CM := CohomologyModule(GGal, PicMod);
H1 := CohomologyGroup(CM, 1); #H1;










